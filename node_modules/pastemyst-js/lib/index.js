"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasteMystInfo = void 0;
var axios = require('axios').default;
// https://github.com/CodeMyst/PasteMyst/blob/master/public/languages.txt
var pasteMystLanguages = {
    Autodetect: 'autodetect',
    Plaintext: 'plaintext',
    Batch: 'bat',
    C: 'c',
    Csharp: 'csharp',
    Cpp: 'cpp',
    Css: 'css',
    Clojure: 'clojure',
    Coffeescript: 'coffeescript',
    D: 'd',
    Dockerfile: 'dockerfile',
    Fsharp: 'fsharp',
    Go: 'go',
    Html: 'html',
    Handlebars: 'handlebars',
    Ini: 'ini',
    Json: 'json',
    Java: 'java',
    Javascript: 'javascript',
    Lua: 'lua',
    Markdown: 'markdown',
    Objective: 'objective',
    Php: 'php',
    Perl: 'perl',
    Powershell: 'powershell',
    Python: 'python',
    R: 'r',
    Razor: 'razor',
    Ruby: 'ruby',
    Rust: 'rust',
    Sql: 'sql',
    Swift: 'swift',
    Typescript: 'typescript',
    Visualbasic: 'vb',
    Xml: 'xml',
    Yaml: 'yaml',
};
var pasteMystDefaultLanguage = pasteMystLanguages.Autodetect;
var PasteMystExpiration;
(function (PasteMystExpiration) {
    PasteMystExpiration["OneHour"] = "1h";
    PasteMystExpiration["TwoHours"] = "2h";
    PasteMystExpiration["TenHours"] = "10h";
    PasteMystExpiration["OneDay"] = "1d";
    PasteMystExpiration["TwoDays"] = "2d";
    PasteMystExpiration["OneWeek"] = "1w";
    PasteMystExpiration["OneMonth"] = "1m";
    PasteMystExpiration["OneYear"] = "1y";
    PasteMystExpiration["Never"] = "never";
})(PasteMystExpiration || (PasteMystExpiration = {}));
var validLanguages = Object.values(pasteMystLanguages);
// Keep expirations in ascending order to be able to step to the next higher or lower expiration
var validExpirations = [
    PasteMystExpiration.OneHour,
    PasteMystExpiration.TwoHours,
    PasteMystExpiration.TenHours,
    PasteMystExpiration.OneDay,
    PasteMystExpiration.TwoDays,
    PasteMystExpiration.OneWeek,
    PasteMystExpiration.OneMonth,
    PasteMystExpiration.OneYear,
    PasteMystExpiration.Never,
];
// Discord uses highlight.js
// https://github.com/highlightjs/highlight.js/blob/master/SUPPORTED_LANGUAGES.md
// ToDo: Reference for future rewrite: https://github.com/CodeMyst/pastemyst-v2/blob/master/data/languages.json
var discordPMLanguageLookup = {
    plaintext: 'plaintext',
    txt: 'plaintext',
    text: 'plaintext',
    bat: 'bat',
    cmd: 'bat',
    dos: 'bat',
    c: 'c',
    h: 'c',
    'c#': 'csharp',
    cs: 'csharp',
    csharp: 'csharp',
    cpp: 'cpp',
    hpp: 'cpp',
    cc: 'cpp',
    hh: 'cpp',
    'c++': 'cpp',
    'h++': 'cpp',
    cxx: 'cpp',
    hxx: 'cpp',
    css: 'css',
    clojure: 'clojure',
    clj: 'clojure',
    coffeescript: 'coffeescript',
    coffee: 'coffeescript',
    cson: 'coffeescript',
    iced: 'coffeescript',
    d: 'd',
    dockerfile: 'dockerfile',
    docker: 'dockerfile',
    fsharp: 'fsharp',
    'f#': 'fsharp',
    go: 'go',
    golang: 'go',
    html: 'html',
    xhtml: 'html',
    handlebars: 'handlebars',
    hbs: 'handlebars',
    'html.hbs': 'handlebars',
    'html.handlebars': 'handlebars',
    ini: 'ini',
    json: 'json',
    java: 'java',
    jsp: 'java',
    javascript: 'javascript',
    js: 'javascript',
    jsx: 'javascript',
    lua: 'lua',
    markdown: 'markdown',
    md: 'markdown',
    mkdown: 'markdown',
    mkd: 'markdown',
    objective: 'objective',
    objectivec: 'objective',
    mm: 'objective',
    objc: 'objective',
    'obj-c': 'objective',
    php: 'php',
    php3: 'php',
    php4: 'php',
    php5: 'php',
    php6: 'php',
    php7: 'php',
    php8: 'php',
    perl: 'perl',
    pl: 'perl',
    pm: 'perl',
    powershell: 'powershell',
    ps: 'powershell',
    ps1: 'powershell',
    python: 'python',
    py: 'python',
    gyp: 'python',
    r: 'r',
    razor: 'razor',
    cshtml: 'razor',
    'razor-cshtml': 'razor',
    ruby: 'ruby',
    rb: 'ruby',
    gemspec: 'ruby',
    podspec: 'ruby',
    thor: 'ruby',
    irb: 'ruby',
    rust: 'rust',
    rs: 'rust',
    sql: 'sql',
    swift: 'swift',
    typescript: 'typescript',
    ts: 'typescript',
    vb: 'vb',
    visualbasic: 'vb',
    vbnet: 'vb',
    vba: 'vb',
    vbscript: 'vb',
    vbs: 'vb',
    xml: 'xml',
    rss: 'xml',
    atom: 'xml',
    xjb: 'xml',
    xsd: 'xml',
    xsl: 'xml',
    plist: 'xml',
    svg: 'xml',
    yaml: 'yaml',
    yml: 'yaml',
};
// Capitalization for language in discord doesn't matter. ```php is as valid as ```pHp
// Do not use g (global flag) so that only the first complete match including capture groups is returned
// (instead of all whole match occurrences throughout the text, but without the capture group matches)
// First capture group is for language detection, second capture group for code block content detection
// The language might not be set in a discord message, so first capture group is optional
// For str.match expresisons. result[0] is the whole regext match,
// result[1] is first capture group match, result[2] is second capture group match etc
// When the language is not specified, there will be no matched language and the code block is the first capture group
// To make sure there is always at least one matched capture group, we require the code block to have some content,
// so there needs to be at least one character in a code block
// Include the \n to the language capture group and trim it out, otherwise there is no good approach I have
// found to make sure where the language declaration starts and where it ends
var codeBlockRegex = /```([a-zA-Z]*\s*\n)*([\s\S]+?)\n*```/;
// str.matchAll requires the regex to have the global flag set, otherwise TypeError will be thrown.
// str.matchAll will also include capture group matches
var codeBlockRegexMatchAll = /```([a-zA-Z]*\s*\n)*([\s\S]+?)\n*```/g;
/**
 * Determine if a value is a String
 *
 * @param {any} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
    return typeof val === 'string' || val instanceof String;
}
/**
 * Tries to convert the specified discord code block language into a
 * valid PasteMyst language. If no matching language was found, will return 'autodetect'
 *
 * @remarks
 * Discord uses highlight.js, as such, the conversion should work for highlight.js language
 * keywords that related to one of the accepted languages of PasteMyst v1, a list of which can
 * be seen {@link https://github.com/CodeMyst/PasteMyst/blob/master/public/languages.txt | here}.
 *
 * @param discordLanguage - The specified code language (case insensitive) in the discord message
 * (values that follow the initial ``` and work for highlighting syntax in a code block)
 * @returns A valid PasteMyst language
 */
function discordToPasteMystLanguage(discordLanguage) {
    var pasteMystLanguage = discordPMLanguageLookup[discordLanguage.toLowerCase().trim()];
    return pasteMystLanguage !== undefined ? pasteMystLanguage : pasteMystDefaultLanguage;
}
exports.discordToPasteMystLanguage = discordToPasteMystLanguage;
/**
 * Checks if a discord message contains at least 1 code block
 *
 * @remarks
 * discord code blocks start and end with ```
 *
 * @param message - The Discord message
 * @returns true if a codeblock was found, otherwise false
 */
exports.containsDiscordCodeBlock = function (message) {
    return message != null && isString(message) && codeBlockRegex.test(message);
};
/**
 * Converts the specified language of the first code block of a
 * discord into the matching valid PasteMyst language and returns it.
 * If no code block exists in the message, null will be returned.
 * If a code block exists but either no language was defined, or
 * no matching PasteMyst language was found, 'autodetect' is returned.
 *
 * @remarks
 * discord code blocks start and end with ```
 *
 * @param message - The discord message
 * @returns The first code block string if one is available, otherwise null
 */
exports.getFirstDiscordCodeBlockLanguage = function (message) {
    if (message != null && isString(message)) {
        var languageCodeMatches = message.match(codeBlockRegex);
        if (languageCodeMatches) {
            var discordLanguage = getDiscordCodeLanguageFromMatch(languageCodeMatches);
            return discordToPasteMystLanguage(discordLanguage);
        }
    }
    return null;
};
/**
 * Returns the body of the first code block of a discord message, If one is available
 *
 * @remarks
 * discord code blocks start and end with ```
 *
 * @param message - The Discord message
 * @returns The first code block string if one is available, otherwise null
 */
exports.getFirstDiscordCodeBlockContent = function (message) {
    if (message != null && isString(message)) {
        var languageCodeMatches = message.match(codeBlockRegex);
        if (languageCodeMatches) {
            var discordCodeBlock = getDiscordCodeBlockBodyFromMatch(languageCodeMatches);
            return discordCodeBlock;
        }
    }
    return null;
};
// If optional capture groups like the language group are not found, they
// still have their reserved index in the match but are undefined
function getDiscordCodeLanguageFromMatch(match) {
    var discordLanguage = match[1] !== undefined ? match[1].trim() : '';
    return discordLanguage;
}
function getDiscordCodeBlockBodyFromMatch(match) {
    var discordCodeBlock = match[2];
    return discordCodeBlock;
}
/**
 * Returns an array with PasteMyst relevant information for all code blocks in a discord message
 *
 * @remarks
 * discord code blocks start and end with ```
 *
 * @param message - The Discord message
 * @returns An array of objects with the keys 'language' for the PasteMyst compatible language and 'code' for the code block content
 */
exports.getFullDiscordCodeBlockInfo = function (message) {
    var e_1, _a;
    var codeBlockInfos = [];
    if (message != null && isString(message)) {
        var matches = message.matchAll(codeBlockRegexMatchAll);
        try {
            for (var matches_1 = __values(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {
                var match = matches_1_1.value;
                if (match) {
                    var matchDetails = getCodeBlockRgxMatchDetail(match);
                    codeBlockInfos.push(matchDetails);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (matches_1_1 && !matches_1_1.done && (_a = matches_1.return)) _a.call(matches_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return codeBlockInfos;
};
function getCodeBlockRgxMatchDetail(match) {
    var discordLanguage = getDiscordCodeLanguageFromMatch(match);
    return {
        language: discordToPasteMystLanguage(discordLanguage),
        code: getDiscordCodeBlockBodyFromMatch(match),
    };
}
/**
 * Uses the cumulative time value of the input parameters and returns a PasteMyst expiration
 * that matches at least the duration of the input time or a higher value
 *
 * @param months - Number of months (1 month is counted as 30 days)
 * @param days - Number of days
 * @param hours - Number of hours
 * @returns A valid PasteMyst expiration value
 */
exports.getNextHigherExpiration = function (months, days, hours) {
    var expirationHours = getHours(months, days, hours);
    return getNextHigherExpirationFromHours(expirationHours);
};
/**
 * Returns a PasteMyst expiration
 * that matches at least the duration of the input time or a higher value
 *
 * @param expirationSeconds - The expiration duration in seconds
 * @returns A valid PasteMyst expiration value
 */
exports.getNextHigherExpirationFromSeconds = function (expirationSeconds) {
    var expirationHours = secondsToHours(expirationSeconds);
    return getNextHigherExpirationFromHours(expirationHours);
};
/**
 * Uses the cumulative time value of the input parameters and returns a PasteMyst expiration
 * that matches maximally the duration of the input time or a lower value
 *
 * @param months - Number of months (1 month is counted as 30 days)
 * @param days - Number of days
 * @param hours - Number of hours
 * @returns A valid PasteMyst expiration value
 */
exports.getNextLowerExpiration = function (months, days, hours) {
    var expirationHours = getHours(months, days, hours);
    return getNextLowerExpirationFromHours(expirationHours);
};
/**
 * Returns a PasteMyst expiration
 * that matches maximally the duration of the input time or a lower value
 *
 * @param expirationSeconds - The expiration duration in seconds
 * @returns A valid PasteMyst expiration value
 */
exports.getNextLowerExpirationFromSeconds = function (expirationSeconds) {
    var expirationHours = secondsToHours(expirationSeconds);
    return getNextLowerExpirationFromHours(expirationHours);
};
function secondsToHours(seconds) {
    return seconds / 3600;
}
function getHours(months, days, hours) {
    if (months == undefined) {
        months = 0;
    }
    if (days == undefined) {
        days = 0;
    }
    if (hours == undefined) {
        hours = 0;
    }
    // Assuming 30 days for a month
    return months * 720 + days * 24 + hours;
}
function getNextHigherExpirationFromHours(expirationHours) {
    var hours1d = 24;
    var hours1m = hours1d * 30;
    var hours1y = hours1m * 12;
    if (expirationHours > hours1y) {
        return PasteMystExpiration.Never;
    }
    if (expirationHours > hours1m) {
        return PasteMystExpiration.OneYear;
    }
    if (expirationHours > hours1d * 7) {
        return PasteMystExpiration.OneMonth;
    }
    if (expirationHours > hours1d * 2) {
        return PasteMystExpiration.OneWeek;
    }
    if (expirationHours > hours1d) {
        return PasteMystExpiration.TwoDays;
    }
    if (expirationHours > 10) {
        return PasteMystExpiration.OneDay;
    }
    if (expirationHours > 2) {
        return PasteMystExpiration.TenHours;
    }
    if (expirationHours > 1) {
        return PasteMystExpiration.TwoHours;
    }
    return PasteMystExpiration.OneHour;
}
function getNextLowerExpirationFromHours(expirationHours) {
    // Add a very slight amount of time so that 2hours does not fall into the 1 hours but 2 hours category for example,
    // due to how checks in getNextHigherExpirationFromHours are handled
    var nextHigherExpiration = getNextHigherExpirationFromHours(expirationHours + 0.01);
    return getPreviousExpiration(nextHigherExpiration);
}
function getPreviousExpiration(expirationStr) {
    var index = validExpirations.indexOf(expirationStr);
    if (index < 0) {
        return PasteMystExpiration.Never;
    }
    if (index === 0) {
        return getMinimumExpiration();
    }
    return validExpirations[index - 1];
}
function getMinimumExpiration() {
    return PasteMystExpiration.OneHour;
}
// language will default to pasteMystLanguages.Autodetect if no valid language is specified
function getValidLanguage(value) {
    return getValidKeyword(value, validLanguages, pasteMystDefaultLanguage);
}
// returns the input if value is a valid expiration, otherwise 'Unknown'
function getExpiration(value) {
    return getValidKeyword(value, validExpirations, 'Unknown');
}
function getValidKeyword(value, keywords, defaultValue) {
    if (value != null) {
        var lowerValue = value.toLowerCase();
        if (keywords.indexOf(lowerValue) >= 0) {
            return lowerValue;
        }
    }
    return defaultValue;
}
var pasteMystUrlInfo = {
    endpoint: 'https://paste.myst.rs/',
    postEndpoint: 'https://paste.myst.rs/api/paste',
    getEndpoint: 'https://paste.myst.rs/api/paste?id=',
};
var PasteMystForm = /** @class */ (function () {
    function PasteMystForm(code, expiresIn, language) {
        this.code = code;
        this.expiresIn = expiresIn;
        this.language = language;
    }
    return PasteMystForm;
}());
function createForm(code, expiresIn, language) {
    return new PasteMystForm(encodeURI(code), getExpiration(expiresIn), getValidLanguage(language));
}
var PasteMystInfo = /** @class */ (function () {
    function PasteMystInfo(id, link, createdAt, date, code, expiresIn, language) {
        this.id = id;
        this.link = link;
        this.createdAt = createdAt;
        this.date = date;
        this.code = code;
        this.expiresIn = expiresIn;
        this.language = language;
    }
    return PasteMystInfo;
}());
exports.PasteMystInfo = PasteMystInfo;
function createPasteMystInfoFromResponse(response) {
    return new PasteMystInfo(response.id, pasteMystUrlInfo.endpoint + response.id, response.createdAt, utcDateFromUnixSeconds(response.createdAt), response.code, response.expiresIn, response.language);
}
function utcDateFromUnixSeconds(unixSeconds) {
    return new Date(unixSeconds * 1000);
}
function localDateFromUnixSeconds(unixSeconds) {
    return convertUTCDateToLocalDate(utcDateFromUnixSeconds(unixSeconds));
}
function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);
    return newDate;
}
/**
 * Sends a post request to the PasteMyst service, requesting the creation of the PasteMyst with the specified values.
 * The caller of this method should add error handling as this method throws if there is an http request
 * error (for example from the post payload having invalid values, such as a non-valid expiration string)
 * or in case the response was malformed
 *
 * @param code - The code/text content of the PasteMyst
 * @param expiration - A valid expiration string. If invalid, the service will reject the request
 * @param language - A valid PasteMyst language option. If invalid, the language will default to 'autodetect'
 * @returns A processed version of the PasteMyst information the server returns for the PasteMyst that was created in this request
 */
exports.createPasteMyst = function (code, expiration, language) { return __awaiter(void 0, void 0, void 0, function () {
    var form, json, options, axiosRequest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                form = createForm(code, expiration, language);
                json = JSON.stringify(form);
                options = {
                    method: 'post',
                    url: pasteMystUrlInfo.postEndpoint,
                    responseEncoding: 'utf8',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    data: json,
                };
                axiosRequest = axios(options);
                return [4 /*yield*/, handleAxiosRequestAndCreateMyst(axiosRequest)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
/**
 * Requests and returns a PasteMyst from the PasteMyst service.
 * The caller of this method should add error handling as this method throws if there is an http request
 * error (for example from passing an invalid ID) or in case the response was malformed
 *
 * @param id - The ID of the myst to retrieve
 * @returns A processed version of the PasteMyst information the server returns
 */
exports.getPasteMyst = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var axiosRequest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                axiosRequest = axios.get(pasteMystUrlInfo.getEndpoint + id);
                return [4 /*yield*/, handleAxiosRequestAndCreateMyst(axiosRequest)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
function handleAxiosRequestAndCreateMyst(axiosRequest) {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1, malformMessage, pasteMystInfo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, axiosRequest];
                case 1:
                    response = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    throw error_1;
                case 3:
                    if (!validateResponseData(response.data)) {
                        malformMessage = getMalformedResponseDataMessage(response.data);
                        throw new Error("Response received, but malformed: " + malformMessage);
                    }
                    try {
                        pasteMystInfo = createPasteMystInfoFromResponse(response.data);
                        return [2 /*return*/, pasteMystInfo];
                    }
                    catch (dataParseError) {
                        throw new Error("Response received, error trying to create PasteMystInfo from it: " + dataParseError);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
var requiredResponseDataAttributes = ['id', 'createdAt', 'code', 'expiresIn', 'language'];
function validateResponseData(responseData) {
    return (responseData != null && requiredResponseDataAttributes.every(function (attribute) { return responseData[attribute] !== undefined; }));
}
function getMalformedResponseDataMessage(responseData) {
    return "Expected response data object to have keys " + requiredResponseDataAttributes + "\nActual response data: " + String(responseData);
}
// Return a copy of the array to prevent external code from editing the source array
/**
 * Returns a copy of the array containing all valid PasteMyst v1 language options
 *
 * @returns All valid PasteMyst v1 language options
 */
exports.getLanguageOptions = function () {
    return validLanguages.slice();
};
/**
 * Returns a copy of the array containing all valid PasteMyst expiration options
 *
 * @returns All valid PasteMyst expiration options
 */
exports.getExpirationOptions = function () {
    return validExpirations.slice();
};
